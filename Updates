const express = require('express');
const app = express();
const csv = require('json2csv');
const xlsx = require('xlsx');
const { jsPDF } = require('jspdf');
require('jspdf-autotable');
const bodyParser = require('body-parser');
const cors = require('cors');

app.use(cors());
app.use(bodyParser.json());

app.post('/api/convert', (req, res) => {
  const { data, fileType } = req.body;

  if (!data || !fileType) {
    return res.status(400).json({ error: 'Data and fileType are required' });
  }

  let convertedData;

  try {
    const jsonData = JSON.parse(data);

    if (fileType === 'CSV') {
      const fields = Object.keys(jsonData[0]);
      convertedData = csv.parse(jsonData, { fields });
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.csv"');
      res.send(Buffer.from(convertedData));

    } else if (fileType === 'Excel') {
      const worksheet = xlsx.utils.json_to_sheet(jsonData);
      const workbook = xlsx.utils.book_new();
      xlsx.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
      const excelBuffer = xlsx.write(workbook, { type: 'buffer', bookType: 'xlsx' });
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.xlsx"');
      res.send(excelBuffer);

    } else if (fileType === 'PDF') {
      const doc = new jsPDF();
      const tableColumn = Object.keys(jsonData[0]);
      const tableRows = jsonData.map(item => Object.values(item));

      doc.autoTable({
        head: [tableColumn],
        body: tableRows,
        styles: {
          cellPadding: 3,
          fontSize: 10,
          halign: 'center',
          valign: 'middle',
          lineColor: [0, 0, 0],
          lineWidth: 0.1,
          textColor: [0, 0, 0],
          fillColor: [255, 255, 255],
          tableLineColor: [0, 0, 0],
          tableLineWidth: 0.15
        },
        headStyles: {
          fillColor: [44, 62, 80],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [240, 240, 240]
        }
      });

      convertedData = doc.output('arraybuffer');
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.pdf"');
      res.send(Buffer.from(convertedData));

    } else if (fileType === 'XML') {
      const xml = jsonToXml(jsonData); // Assuming you have a function to do this
      res.setHeader('Content-Type', 'application/xml');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.xml"');
      res.send(Buffer.from(xml));

    } else if (fileType === 'TXT') {
      convertedData = jsonData.map(item => JSON.stringify(item)).join('\n');
      res.setHeader('Content-Type', 'text/plain');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.txt"');
      res.send(Buffer.from(convertedData));

    } else {
      return res.status(400).json({ error: 'Invalid fileType' });
    }

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred during conversion' });
  }
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// Helper function to convert JSON to XML
function jsonToXml(jsonData) {
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<root>\n';
  jsonData.forEach(item => {
    xml += '  <item>\n';
    Object.keys(item).forEach(key => {
      xml += `    <${key}>${item[key]}</${key}>\n`;
    });
    xml += '  </item>\n';
  });
  xml += '</root>';
  return xml;
}













import React, { useState, useRef } from 'react'; // Importing React and necessary hooks
import axios from 'axios'; // Importing Axios for HTTP requests
import './AppAdvanced.css'; // Importing CSS file for styling

const DataConversionForm = () => {
  const [data, setData] = useState(''); // State for data input
  const [fileType, setFileType] = useState(''); // State for selected file type
  const [errorMessage, setErrorMessage] = useState(''); // State for error messages
  const fileInputRef = useRef(); // Reference to the file input element

  const handleDataChange = (e) => {
    const newData = e.target.value;
    setData(newData); // Update data state

    // Clear error message if JSON data is updated
    if (errorMessage && newData.trim() !== '') {
      try {
        JSON.parse(newData); // Try to parse the JSON
        setErrorMessage(''); // Clear error message if JSON is valid
      } catch (error) {
        // Do nothing if JSON is invalid
      }
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0]; // Get the uploaded file
    if (file && file.type === 'application/json') { // Validate if file is JSON
      const reader = new FileReader();
      reader.onload = (e) => {
        setData(e.target.result); // Update data state with file content
        setErrorMessage(''); // Clear error message
      };
      reader.readAsText(file); // Read file as text
    } else {
      setErrorMessage('Please upload a valid JSON file.'); // Display error message for invalid file type
    }
  };

  const handleFileTypeChange = (e) => {
    setFileType(e.target.value); // Update fileType state
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent default form submission behavior

    // Check for valid JSON format
    try {
      JSON.parse(data); // Try to parse the JSON
    } catch (error) {
      setErrorMessage('Invalid JSON format'); // Set error message if JSON is invalid
      return;
    }

    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = null; // Reset the file input field
    }

    // Make Axios POST request to backend API
    try {
      const response = await axios.post('http://localhost:3000/api/convert', {
        data,
        fileType,
      });

      const fileData = response.data; // Get the response data
      const blob = new Blob([fileData], { type: response.headers['content-type'] }); // Create a new Blob object
      const url = URL.createObjectURL(blob); // Create a URL for the Blob object
      const link = document.createElement('a'); // Create a new anchor element
      link.href = url; // Set the href of the anchor to the Blob URL
      link.download = `converted.${fileType === 'Excel' ? 'xlsx' : fileType.toLowerCase()}`; // Set the download attribute of the anchor
      link.click(); // Programmatically click the anchor to trigger the download

      setData(''); // Clear data state
      setFileType(''); // Clear fileType state
      setErrorMessage(''); // Clear error message
    } catch (error) {
      console.error(error);
      setErrorMessage(`An error occurred during conversion: ${error.response?.data?.error || error.message}`); // Set error message if Axios request fails
    }
  };

  return (
    <div className="data-conversion-form">
      <h1>Hackathon</h1>
      <form onSubmit={handleSubmit}>
        <textarea
          id="data"
          name="data"
          value={data}
          onChange={handleDataChange}
          placeholder="Enter JSON data"
          rows="10"
        />
        <input
          type="file"
          id="fileInput"
          name="fileInput"
          accept=".json"
          onChange={handleFileChange}
          ref={fileInputRef}
        />
        <select
          id="fileType"
          name="fileType"
          value={fileType}
          onChange={handleFileTypeChange}
        >
          <option value="">Select file type</option>
          <option value="CSV">CSV</option>
          <option value="Excel">Excel</option>
          <option value="PDF">PDF</option>
          <option value="XML">XML</option>
          <option value="TXT">TXT</option>
        </select>
        <button type="submit">Convert</button>
      </form>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
    </div>
  );
};

export default DataConversionForm;




const express = require('express');
const app = express();
const csv = require('json2csv');
const xlsx = require('xlsx');
const { jsPDF } = require('jspdf');
require('jspdf-autotable');
const bodyParser = require('body-parser');
const cors = require('cors');

app.use(cors());
app.use(bodyParser.json());

app.post('/api/convert', (req, res) => {
  const { data, fileType } = req.body;

  if (!data || !fileType) {
    return res.status(400).json({ error: 'Data and fileType are required' });
  }

  let convertedData;

  try {
    const jsonData = JSON.parse(data);

    if (fileType === 'CSV') {
      const fields = Object.keys(jsonData[0]);
      convertedData = csv.parse(jsonData, { fields });
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.csv"');
      res.send(Buffer.from(convertedData));

    } else if (fileType === 'Excel') {
      const worksheet = xlsx.utils.json_to_sheet(jsonData);
      const workbook = xlsx.utils.book_new();
      xlsx.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
      convertedData = xlsx.write(workbook, { type: 'buffer', bookType: 'xlsx' });
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.xlsx"');
      res.send(convertedData);

    } else if (fileType === 'PDF') {
      const doc = new jsPDF();
      const tableColumn = Object.keys(jsonData[0]);
      const tableRows = jsonData.map(item => Object.values(item));

      doc.autoTable({
        head: [tableColumn],
        body: tableRows,
        styles: {
          cellPadding: 3,
          fontSize: 10,
          halign: 'center',
          valign: 'middle',
          lineColor: [0, 0, 0],
          lineWidth: 0.1,
          textColor: [0, 0, 0],
          fillColor: [255, 255, 255],
          tableLineColor: [0, 0, 0],
          tableLineWidth: 0.15
        },
        headStyles: {
          fillColor: [44, 62, 80],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [240, 240, 240]
        }
      });

      convertedData = doc.output('arraybuffer');
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.pdf"');
      res.send(Buffer.from(convertedData));

    } else if (fileType === 'XML') {
      const xml = jsonToXml(jsonData); // Assuming you have a function to do this
      res.setHeader('Content-Type', 'application/xml');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.xml"');
      res.send(Buffer.from(xml));

    } else if (fileType === 'TXT') {
      convertedData = jsonData.map(item => JSON.stringify(item)).join('\n');
      res.setHeader('Content-Type', 'text/plain');
      res.setHeader('Content-Disposition', 'attachment; filename="converted.txt"');
      res.send(Buffer.from(convertedData));

    } else {
      return res.status(400).json({ error: 'Invalid fileType' });
    }

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred during conversion' });
  }
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// Helper function to convert JSON to XML
function jsonToXml(jsonData) {
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<root>\n';
  jsonData.forEach(item => {
    xml += '  <item>\n';
    Object.keys(item).forEach(key => {
      xml += `    <${key}>${item[key]}</${key}>\n`;
    });
    xml += '  </item>\n';
  });
  xml += '</root>';
  return xml;
}



{
  "name": "data-conversion-app",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "axios": "^1.7.2",
    "express": "^4.17.1",
    "json2csv": "^5.0.6",
    "jspdf": "^2.4.0",
    "xlsx": "^0.17.0",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:3000"
}



.data-conversion-form {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.data-conversion-form h1 {
  text-align: center;
  color: #333;
  font-size: 24px;
}

.data-conversion-form form {
  display: flex;
  flex-direction: column;
}

.data-conversion-form textarea {
  margin-bottom: 10px;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  resize: vertical;
}

.data-conversion-form input[type="file"] {
  margin-bottom: 10px;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.data-conversion-form select {
  margin-bottom: 10px;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.data-conversion-form button {
  padding: 10px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.data-conversion-form button:hover {
  background-color: #0056b3;
}

.error-message {
  color: red;
  font-size: 14px;
  margin-top: 10px;
  text-align: center;
}
